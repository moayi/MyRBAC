<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
         <!-- 配置数据库连接相关-->
           <!--1.加载配置文件 -->
        <context:property-placeholder location="classpath:properties/*.properties" />
           <!--2.配置数据库相关-->
        <bean id="dataSource"  class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" init-method="init">
            <property name="url" value="${jdbc.url}" />
            <property name="username" value="${jdbc.username}" />
            <property name="password" value="${jdbc.password}" />
            <property name="driverClassName" value="${jdbc.driver}" />
            <property name="maxActive" value="10" />
            <property name="minIdle" value="5" />
            <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
            <property name="timeBetweenEvictionRunsMillis" value="60000" />
            <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
            <property name="minEvictableIdleTimeMillis" value="300000" />
            <property name="validationQuery" value="SELECT 'x'" />
            <property name="testWhileIdle" value="true" />
            <property name="testOnBorrow" value="false" />
            <property name="testOnReturn" value="false" />
            <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
            <property name="poolPreparedStatements" value="true" />
            <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
            <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
            <property name="filters" value="stat" />
            <property name="proxyFilters">
                <list>
                    <ref bean="wall-filter" />
                </list>
            </property>
        </bean>
    <!-- druid spring monitor setting druid监控spring-->
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>com.sx.service.*</value>
                <value>com.sx.mapper.*</value>
            </list>
        </property>
    </bean>

    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <property name="dbType" value="mysql" />
       <!-- <property name="config" ref="wall-filter-config" />-->
    </bean>
    <aop:config proxy-target-class="true">
    <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
    </aop:config>
        <!-- 配置工厂连接-->
        <bean id="sqlSeesionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
             <property name="dataSource" ref="dataSource"></property>
            <property name="configLocation" value="classpath:config/mybatis-config.xml"></property>
            <property  name="mapperLocations" value="classpath:mappers/*Mapper.xml"></property>
        </bean>
        <!-- 扫描DAO接口-->
        <bean id="mapperLocations" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="basePackage" value="com.sx.mapper"></property>
        </bean>
        <!--配置事务-->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
           <property name="dataSource" ref="dataSource"></property>
       </bean>
             <!--1.配置通知 -->
          <tx:advice  id="txadv" transaction-manager="transactionManager">
               <tx:attributes>
                      <!-- 配置传播行为-->
                   <tx:method name="add*" isolation="READ_COMMITTED" read-only="false" rollback-for="Exception.class" propagation="REQUIRED"/>
               </tx:attributes>
          </tx:advice>
            <!--2.配置切面 -->
          <aop:config>
              <aop:advisor advice-ref="txadv" pointcut="execution(* com.sx.service.*.*(..))"/>
          </aop:config>
    <!--扫描所有的实例，将其纳入工厂 -->
       <context:component-scan base-package="com.sx.*">
           <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:exclude-filter>
       </context:component-scan>
   <import resource="classpath:spring/applicationContext-mq.xml"></import>
    <import resource="classpath:spring/applicationContext-redis.xml"></import>
    <import resource="classpath:spring/applicationContext-shiro.xml"></import>
    <aop:aspectj-autoproxy proxy-target-class="true" />
</beans>